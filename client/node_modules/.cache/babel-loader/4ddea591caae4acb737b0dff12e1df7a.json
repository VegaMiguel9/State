{"ast":null,"code":"import React,{useEffect}from\"react\";import{useQuery}from'@apollo/react-hooks';import{QUERY_CATEGORIES}from\"../../utils/queries\";import{UPDATE_CATEGORIES,UPDATE_CURRENT_CATEGORY}from'../../utils/actions';import{idbPromise}from'../../utils/helpers';import{useDispatch,useSelector}from'react-redux';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CategoryMenu(){var state=useSelector(function(state){return state;});var dispatch=useDispatch();var categories=state.categories;var _useQuery=useQuery(QUERY_CATEGORIES),loading=_useQuery.loading,categoryData=_useQuery.data;useEffect(function(){//if categoryData exists or has changed from the response of useQuery, then run dispatch()\nif(categoryData){//execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\ndispatch({type:UPDATE_CATEGORIES,categories:categoryData.categories});categoryData.categories.forEach(function(category){idbPromise('categories','put',category);});}else if(!loading){idbPromise('categories','get').then(function(categories){dispatch({type:UPDATE_CATEGORIES,categories:categories});});}},[categoryData,loading,dispatch]);var handleClick=function handleClick(id){dispatch({type:UPDATE_CURRENT_CATEGORY,currentCategory:id});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Choose a Category:\"}),categories.map(function(item){return/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){handleClick(item._id);},children:item.name},item._id);})]});}export default CategoryMenu;","map":{"version":3,"names":["React","useEffect","useQuery","QUERY_CATEGORIES","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","idbPromise","useDispatch","useSelector","jsx","_jsx","jsxs","_jsxs","CategoryMenu","state","dispatch","categories","_useQuery","loading","categoryData","data","type","forEach","category","then","handleClick","id","currentCategory","children","map","item","onClick","_id","name"],"sources":["/Users/vega/bootcamp/hw/State/client/src/components/CategoryMenu/index.js"],"sourcesContent":["import React, {useEffect} from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport {UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY} from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction CategoryMenu() {\n\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n\n  const { categories } = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n\n  useEffect(() => {\n    //if categoryData exists or has changed from the response of useQuery, then run dispatch()\n\n    if(categoryData) {\n      //execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category)\n      }) \n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        })\n      })\n    }\n  }, [categoryData, loading, dispatch]);\n\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAGC,SAAS,KAAO,OAAO,CACtC,OAASC,QAAQ,KAAQ,qBAAqB,CAC9C,OAASC,gBAAgB,KAAQ,qBAAqB,CACtD,OAAQC,iBAAiB,CAAEC,uBAAuB,KAAO,qBAAqB,CAC9E,OAASC,UAAU,KAAQ,qBAAqB,CAChD,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEvD,QAAS,CAAAC,YAAYA,CAAA,CAAG,CAEtB,GAAM,CAAAC,KAAK,CAAGN,WAAW,CAAC,SAACM,KAAK,CAAK,CACnC,MAAO,CAAAA,KAAK,CACd,CAAC,CAAC,CACF,GAAM,CAAAC,QAAQ,CAAGR,WAAW,EAAE,CAE9B,GAAQ,CAAAS,UAAU,CAAKF,KAAK,CAApBE,UAAU,CAClB,IAAAC,SAAA,CAAwCf,QAAQ,CAACC,gBAAgB,CAAC,CAA1De,OAAO,CAAAD,SAAA,CAAPC,OAAO,CAAQC,YAAY,CAAAF,SAAA,CAAlBG,IAAI,CAGrBnB,SAAS,CAAC,UAAM,CACd;AAEA,GAAGkB,YAAY,CAAE,CACf;AACAJ,QAAQ,CAAC,CACPM,IAAI,CAAEjB,iBAAiB,CACvBY,UAAU,CAAEG,YAAY,CAACH,UAC3B,CAAC,CAAC,CAEFG,YAAY,CAACH,UAAU,CAACM,OAAO,CAAC,SAAAC,QAAQ,CAAI,CAC1CjB,UAAU,CAAC,YAAY,CAAE,KAAK,CAAEiB,QAAQ,CAAC,CAC3C,CAAC,CAAC,CACJ,CAAC,IAAM,IAAI,CAACL,OAAO,CAAE,CACnBZ,UAAU,CAAC,YAAY,CAAE,KAAK,CAAC,CAACkB,IAAI,CAAC,SAAAR,UAAU,CAAI,CACjDD,QAAQ,CAAC,CACPM,IAAI,CAAEjB,iBAAiB,CACvBY,UAAU,CAAEA,UACd,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CACF,CAAC,CAAE,CAACG,YAAY,CAAED,OAAO,CAAEH,QAAQ,CAAC,CAAC,CAGrC,GAAM,CAAAU,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAGC,EAAE,CAAI,CACxBX,QAAQ,CAAC,CACPM,IAAI,CAAEhB,uBAAuB,CAC7BsB,eAAe,CAAED,EACnB,CAAC,CAAC,CACJ,CAAC,CAED,mBACEd,KAAA,QAAAgB,QAAA,eACElB,IAAA,OAAAkB,QAAA,CAAI,oBAAkB,EAAK,CAC1BZ,UAAU,CAACa,GAAG,CAAC,SAAAC,IAAI,qBAClBpB,IAAA,WAEEqB,OAAO,CAAE,SAAAA,QAAA,CAAM,CACbN,WAAW,CAACK,IAAI,CAACE,GAAG,CAAC,CACvB,CAAE,CAAAJ,QAAA,CAEDE,IAAI,CAACG,IAAI,EALLH,IAAI,CAACE,GAAG,CAMN,EACV,CAAC,GACE,CAEV,CAEA,cAAe,CAAAnB,YAAY"},"metadata":{},"sourceType":"module"}